[[-- autogenerate docs if necessary --]]
[[\
  import sys, os, os.path, threading
  import spyce, spyceUtil, spyceException

  docdir = os.path.join(spyce.getServer().config.SPYCE_HOME, 'www', 'docs')

  from spyceCmd import spyceCmdlineRequest, spyceCmdlineResponse
  def one(script):
    outfile = script[:-3] + 'html'
    output = open(outfile, 'w')
    rq = spyceCmdlineRequest(sys.stdin, os.environ, script)
    rsp = spyceCmdlineResponse(output, sys.stderr, False)
    spyce.spyceFileHandler(rq, rsp, script)
    rsp.close()
    spyce.SPYCE_GLOBALS.setdefault('_docgenerated', []).append(script)
  def docgen(request=request):
    L =[os.path.join(docdir, f) for f in os.listdir(docdir) if f.endswith('.spy')]
    for script in L:
      one(script)
    del spyce.SPYCE_GLOBALS['_docgenerate']
    one(request.filename()) # do this after deleting the "lock"
    del spyce.SPYCE_GLOBALS['_docgenerated']

  if not os.path.exists(os.path.join(docdir, 'doc.html')) or '_docgenerate' in spyce.SPYCE_GLOBALS:
    if not '_docgenerate' in spyce.SPYCE_GLOBALS:
      spyce.SPYCE_GLOBALS['_docgenerate'] = 1
      threading.Thread(target=docgen).start()
    L = spyce.SPYCE_GLOBALS.get('_docgenerated', [])
    s = '''
	<html>
	<head>
	  <meta http-equiv="refresh" content="2">
	  <title>Please wait</title>
	</head>
	<body>
      Please wait, autogenerating docs (should only take a couple seconds)...
      <ul>%s</ul>
    </body>
	</html>
	''' % ''.join(['<li><s>' + script + '</s>' for script in L])
    response.write(s)
    raise spyceException.spyceDone()
]]

[[.compact]]

[[.import name=include]]
[[.include file="/inc/static.spi"]]
[[include.spyce('inc/head.spi', {'pagename': 'Spyce Home', 'page': 'index.html'})]]

<b>30-second sales pitch</b>
<table>
<tr>
  <td>[[includeCode('docs/examples/hello.spy') ]]</td>
  <td>
	<ul>
	  <li> Spyce is about embedding Python in HTML to create powerful dynamic web pages
      with a minimal learning curve.

	  <li> Spyce <a href=docs/doc-lang_handlers.html>Active Handlers</a>
	  let you define a function to be called when
	  a form is submitted; Spyce will then inspect the arguments your function
	  desires and pull them out the GET or POST information for you.  Active
	  Handlers also give a painless way to separate data and presentation,
	  since the handlers may be defined in any .py file.

	  <li> Spyce <a href=docs/doc-tag_new2.html>Active Tags</a> 
      allow you to use active handlers
      to create reusable components a la ASP.NET or Tapestry, but without
      imposing the leaky abstraction of pretending your web app
      is a full-blown event-driven fat client.

	  <li> Spyce is modular and extensible. The standard modules include: request,
	  response, redirect, error, debug, include, cookie, session, template,
	  transform, compress, and others.  Writing your own is easy.

	  <li> Spyce scripts are first-order members of the Spyce language, a useful
	  feature not present in other server page languages. This allows Spyce
	  scripts to be turned into functions, useful for templating,
	  internationalization, polymorphic component rendering, etc.

	  <li> Spyce performs well. It can easily serve hundreds of requests per
	  second, and is comparable with JSP, PHP and other languages in its class.

      <li> Spyce works with Python 2.2 and later.
	</ul>
  </td>
</tr>
</table>

<hr>
<b>3 steps to Spyce</b>
<ul>
  <li><a href=docs/get.html>Download</a> (version 2.0.3 released July 21 2005)
  <li>Install: tar -xzf or unzip
  <li>python -u installationpath/spyceCmd.py -l
</ul>
Congratulations, you're running the built-in Spyce webserver.  Go to
http://localhost:8000/index.spy and check it out!  By default, files
are served from installationpath/www/.  This documentation is there,
and a copy of the demos to get you started.

<p>
<b>What's next?</b>
<ul>
  <li><a href=docs/doc-conf_next.html>Starting your first project</a>
  <li><a href=docs/examples/hello-templated.spy?count=3>A more complex hello world</a> 
	  demonstrates the rest of the <a href=/docs/doc-lang.html>Spyce language constructs</a>
  <li>The <a href=/demos/to-do/index.spy>to-do list demo</a> (requires python 2.3 because of Durus) is closer to a real
	  application and shows off using Spyce <a href=docs/doc-lang_handlers.html>Active Handlers</a>
  <li>The <a href=/demos/chat/index.spy>chatbox demo</a> demonstrates
	  an advanced Active Tag implementing a reusable "chat" component.
  <li>Complete <a href=docs/doc.html>Documentation</a> is available on the left.
</ul>
	

[[include.spyce('inc/tail.spi') ]]
