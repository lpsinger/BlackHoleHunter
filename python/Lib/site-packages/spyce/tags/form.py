##################################################
# SPYCE - Python-based HTML Scripting
# Copyright (c) 2002 Rimon Barr.
#
# Refer to spyce.py
# CVS: $Id: form.py 725 2005-05-13 15:27:46Z jbe $
##################################################

__doc__ = '''Spyce tags for create data-populated forms.'''

from spyceTag import spyceTagLibrary, spyceTagPlus, spyceTagSyntaxException
import spyceUtil
import string, urllib, re

def formatArgs(kwargs):
  s = []
  for key in kwargs.keys():
    if kwargs[key] is None:
      s.append( key )
    else:
      s.append( '%s="%s"' % (key, kwargs[key]) )
  s = string.join(s, ' ')
  if s: s = ' '+s
  return s

def _getFormElement(tag, name, attr):
  tag = tag.getParent('form')
  if tag is None: return
  if not hasattr(tag, attr): return
  attr = getattr(tag, attr)
  if attr is None: return
  if not attr.has_key(name): return
  return attr[name]

def getFormValue(tag, name):
  return _getFormElement(tag, name, 'value')

def getFormDefault(tag, name):
  return _getFormElement(tag, name, 'default')

class form_form(spyceTagPlus):
  name = 'form'
  mustend = 1
  def syntax(self):
    self.syntaxPairOnly()
  def begin(self, method='POST', action=None, value=None, default=None, **kwargs):
    if self.getParent('form'):
      raise 'Nested form tags are not allowed'
    method = string.upper(method)
    if method not in ['GET', 'POST']:
      raise 'invalid method attribute value: '+method
    if action is None:
      action = self.getModule('request').uri_path()
    self.value = value
    self.default = default
    self.getOut().write('<form method="%s" action="%s"%s>' % (
      method, action, formatArgs(kwargs)) )
  def end(self):
    self.getOut().write('</form>')

class form_submit(spyceTagPlus):
  name = 'submit'
  handlers = {}
  def syntax(self):
    self.syntaxSingleOnly()
  def begin(self, confirm=None, onclick='', **kwargs):
    if not self.getParent('form'):
      raise 'form:submit must be nested inside form:form'
    if 'name' in kwargs:
      raise "invalid attribute 'name' (use handlers to set different actions for different submit buttons)"
    id = '_submit' + self.getFullId()
    if onclick:
      kwargs['onclick'] = onclick
    else:
      # (can't simply disable the submit element; spyce needs to know which element
      # caused the submit in order to run the proper handlers)
      js = "btn = document.getElementById('%s'); btn.onclick = function () { return false }; btn.value = 'Please wait'" % id
      if confirm:
        msg = re.sub("'", r"\'", confirm)
        js = "_i = confirm('%s'); if (_i) {%s}; return _i" % (msg, js)
      kwargs['onclick'] = js
    self.getOut().write('<input id="%s" name="%s" type="SUBMIT"%s>' % (
      id, id, formatArgs(kwargs),) )

class form_hidden(spyceTagPlus):
  name = 'hidden'
  def syntax(self):
    self.syntaxSingleOnly()
  def begin(self, name, value=None, default=None, _input=None, **kwargs):
    if not _input:
      _input = self.name
    if value is None:
      value = getFormValue(self, name)
      if value is None:
        if default is None:
          default = getFormDefault(self, name)
        value = self.getModule('request').getpost1(name, default)
        if value is None:
          value = ''
    self.getOut().write('<input type="%s" name="%s" value="%s"%s>' % (
      _input, name, value, formatArgs(kwargs)) )

class form_text(form_hidden):
  name = 'text'
  def begin(self, name, value=None, default=None, size=None, maxlength=None, **kwargs):
    if size!=None:
      kwargs['size'] = size
    if maxlength!=None:
      kwargs['maxlength'] = maxlength
    apply(form_hidden.begin, (self, name, value, default), kwargs)

class form_password(form_text):
  name = 'password'

date_img = 0
class form_date(form_text):
  name='date'
  def begin(self, name, value=None, default=None, size=0, format='MM/dd/yyyy', **kwargs):
    dirname = os.path.dirname(form.__file__)
    for fname in ['form_calendar.js', 'form_calendar.gif']:
      spyceUtil.maybeRewriteToRoot(os.path.join(dirname, fname))
    if not hasattr(self.getModule('request'), '_calendarjs'):
      self.getOut().write('''
<div id="calendardiv" name="calendardiv" style="position: absolute; visibility: hidden; background-color: white;"></div>
<script language="JavaScript" src="/_form_calendar.js"></script>
<script language="JavaScript">
  document.write(getCalendarStyles());
  var _calendar = new CalendarPopup("calendardiv");
</script>''')
      self.getModule('request')._calendarjs = True
    # textbox, leveraging form_hidden
    if not size:
      size = len(format)
    kwargs['maxlength'] = len(format)
    kwargs['id'] = name
    kwargs['size'] = size
    form_hidden.begin(self, name, value, default, 'text', **kwargs)
    # thread safety isn't a concern here, this is only used clientside
    global date_img
    i = date_img
    date_img += 1
    # calendar icon
    self.getOut().write('''<img align="middle" src="/_form_calendar.gif" id="_cal%(i)d" name="_cal%(i)d" onclick="_calendar.select(getElement('%(name)s'),'_cal%(i)d','%(format)s'); return false;">''' % locals())

class form_textarea(spyceTagPlus):
  name = 'textarea'
  buffer = 1
  def syntax(self):
    self.syntaxPairOnly()
  def begin(self, name, value=None, rows=None, cols=None, **kwargs):
    self._name = name
    self._value = value
    if self._value is None:
      self._value = getFormValue(self, self._name)
    if rows!=None:
      kwargs['rows'] = rows
    if cols!=None:
      kwargs['cols'] = cols
    self._args = kwargs
  def body(self, _contents):
    if self._value is None:
      if _contents is None or not string.strip(_contents):
        _contents = getFormDefault(self, self._name)
      self._value = self.getModule('request').getpost1(self._name, _contents)
      if self._value is None:
        self._value = ''
    self.getOut().write('<textarea name="%s" %s>%s</textarea>' % (
      self._name, formatArgs(self._args), self._value) )

class form_radio(spyceTagPlus):
  name = 'radio'
  def syntax(self):
    self.syntaxSingleOnly()
  def begin(self, name, value, checked=0, default=0, **kwargs):
    if checked is None: checked=1
    if default is None: default=1
    if not checked:
      checkedValues = getFormValue(self, name)
      if checkedValues is None:
        checkedValues = self.getModule('request').getpost(name)
      if checkedValues!=None and type(checkedValues) not in [type([]), type(())]:
        checkedValues = [checkedValues,]
      if checkedValues!=None:
        checked = value in checkedValues
      else:
        if default:
          checked = 1
        else:
          defaultValues = getFormDefault(self, name)
          if defaultValues!=None and type(defaultValues) not in [type([]), type(())]:
            defaultValues = [defaultValues,]
          if defaultValues!=None:
            checked = value in defaultValues
    if checked:
      checkedstr = ' CHECKED'
    else:
      checkedstr = ''
    self.getOut().write('<input type="%s" name="%s" value="%s"%s%s>' % (
      self.name, name, value, checkedstr, formatArgs(kwargs)) )

class form_checkbox(form_radio):
  name = 'checkbox'

class form_select(spyceTagPlus):
  name = 'select'
  def syntax(self):
    self.syntaxPairOnly()
  def begin(self, name, value=None, default=None, multiple=0, size=None, **kwargs):
    self.varname = name
    self.values = value
    self.default = default
    if multiple is None: multiple = 1
    if multiple:
      multiplestr = ' MULTIPLE'
    else:
      multiplestr = ''
    if size is None:
      sizestr = ''
    else:
      sizestr = ' size="%s"' % size
    self.getOut().write('<select name="%s"%s%s%s>' % (
      self.varname, sizestr, multiplestr, formatArgs(kwargs)))
  def end(self):
    self.getOut().write('</select>')

class form_option(spyceTagPlus):
  name = 'option'
  def syntax(self):
    pass
  def begin(self, text=None, value=None, selected=None, default=None, **kwargs):
    self.text = text
    if value is None:
      valuestr = ''
    else:
      valuestr = ' value="%s"' % value
    selectTag = self.getParent('select')
    if selectTag is None:
      raise 'OPTION tag without enclosing SELECT tag'
    if value and not selected:
      selectedValues = selectTag.values
      if selectedValues is None:
        selectedValues = getFormValue(self, selectTag.varname)
      if selectedValues is None:
        selectedValues = self.getModule('request').getpost(selectTag.varname)
      if selectedValues!=None and type(selectedValues) not in [type([]), type(())]:
        selectedValues = [selectedValues,]
      if selectedValues!=None:
        selected = value in selectedValues
      else:
        if default:
          selected = 1
        else:
          defaultValues = selectTag.default
          if defaultValues is None:
            defaultValues = getFormDefault(self, selectTag.varname)
          if defaultValues!=None and type(defaultValues) not in [type([]), type(())]:
            defaultValues = [defaultValues,]
          if defaultValues!=None:
            selected = value in defaultValues
    if selected:
      selectedstr = ' SELECTED'
    else:
      selectedstr = ''
    self.getOut().write('<option value="%s"%s%s>' % (
      value, selectedstr, formatArgs(kwargs)) )
  def body(self, _contentss):
    if self.text:
      self.getOut().write(self.text)
  def end(self):
    self.getOut().write('</option>')

class form(spyceTagLibrary):
  tags = [
    form_form,
    form_submit,
    form_hidden,
    form_text,
    form_password,
    form_textarea,
    form_radio,
    form_checkbox,
    form_select,
    form_option,
    form_date,
  ] 
